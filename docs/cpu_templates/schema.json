{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://github.com/firecracker-microvm/firecracker/tree/main/docs/cpu-templates/schema.json",
    "title": "Custom CPU template",
    "description": "Custom CPU template language description",
    "type": "object",
    "properties": {
        "cpuid_modifiers": {
            "type": "array",
            "items": {
                "description": "CPUID modifiers. Only for x86_64.",
                "type": "object",
                "properties": {
                    "leaf": {
                        "description": "CPUID leaf index (or function). Must be a string containing an integer.",
                        "type": "string",
                        "examples": ["0x1", "0x2"]
                    },
                    "subleaf": {
                        "description": "CPUID subleaf index (or subfunction). Must be a string containing an integer.",
                        "type": "string",
                        "examples": ["0x1", "0x2"]
                    },
                    "flags": {
                        "description": "KVM CPUID flags, see https://docs.kernel.org/virt/kvm/api.html#kvm-get-supported-cpuid",
                        "type": "integer"
                    },
                    "modifiers": {
                        "type": "array",
                        "items": {
                            "description": "CPUID register modifiers.",
                            "type": "object",
                            "properties": {
                                "register": {
                                    "description": "CPUID register name.",
                                    "type": "string",
                                    "enum": ["eax", "ebx", "ecx", "edx"]
                                },
                                "bitmap": {
                                    "description": "CPUID register value bitmap. Must be in format `0b[01x]{32}`. Corresponding bits will be cleared (`0`), set (`1`) or left intact (`x`).",
                                    "type": "string",
                                    "examples": ["0bxxxx000000000011xx00011011110010", "0bxxxxxxxxxxxxx0xx00xx00x0000000xx"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "msr_modifiers": {
            "type": "array",
            "items": {
                "description": "MSR modifiers. Only for x86_64.",
                "type": "object",
                "properties": {
                    "addr": {
                        "description": "MSR address/identifier. Must be a string containing an integer.",
                        "type": "string",
                        "examples": ["0x10a"]
                    },
                    "bitmap": {
                        "description": "MSR value bitmap. Must be in format `0b[01x]{64}`. Corresponding bits will be cleared (`0`), set (`1`) or left intact (`x`).",
                        "type": "string",
                        "examples": ["0bxxxx000000000000000000000000000000000000000000000000000011101011"]
                    }
                }
            }
        },
        "reg_modifiers": {
            "type": "array",
            "items": {
                "description": "ARM register modifiers. Only for aarch64.",
                "type": "object",
                "properties": {
                    "addr": {
                        "description": "ARM register address/identifier. Must be a string containing an integer. See https://docs.kernel.org/virt/kvm/api.html#kvm-set-one-reg .",
                        "type": "string",
                        "examples": ["0x603000000013c020"]
                    },
                    "bitmap": {
                        "description": "ARM register value bitmap. Must be in format `0b[01x]{128}`. Corresponding bits will be cleared (`0`), set (`1`) or left intact (`x`).",
                        "type": "string",
                        "examples": ["0bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000xxxxxxxxxxxx0000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]
                    }
                }
            }
        }
    }
}
